%%%
%%% createRunScript.m
%%%
%%% Convenience function to create a run script for the Overturning code.
%%%
function createRunScript (sub_dir,run_name,exec_name,use_cluster,walltime,parallel_run)

  %%% File/directory names
  local_home_dir = fullfile(pwd,'../runs');
  local_sub_dir = fullfile(local_home_dir,sub_dir);
  local_run_dir = fullfile(local_sub_dir,run_name);
  cluster_home_dir = '~/MAMEBUS/runs/';  %%% N.B. THIS NEEDS TO BE SPECIFIED IF EXECUTING ON A COMPUTING CLUSTER
  cluster_sub_dir = fullfile(cluster_home_dir,sub_dir);
  cluster_run_dir = fullfile(cluster_sub_dir,run_name);  
  pbsfname = 'pbs_run';
  pbsdirname = fullfile(local_run_dir,pbsfname);
  upfname = fullfile(local_run_dir,'upload.sh');
  downfname = fullfile(local_run_dir,'download.sh');
  cleanfname = fullfile(local_run_dir,'clean.sh');
  sfname = fullfile(local_run_dir,'run.sh');
  
  %%% Create a script file to run the code
  sfid = fopen(sfname,'w');
  if (sfid == -1)
    error(['Could not open ',sfname]);
  end    
  if (use_cluster)
    run_str = [fullfile(cluster_home_dir,'../code/',strtrim(exec_name)),' ',run_name,'_in ','.\n'];
  else
    run_str = [fullfile(local_home_dir,'../code/',strtrim(exec_name)),' ',run_name,'_in ','.\n'];
  end
    
  %%% If we're using the cluster, create a PBS run script
  if (use_cluster && ~parallel_run)     
  
    pbsstr = strcat( ...
      '#!/bin/bash -f\n', ...
      '#PBS -l nodes=1 \n', ...
      '#PBS -l walltime=',num2str(round(walltime)),':00:00 \n', ...
      '#PBS -N\t ',run_name,'\n', ...
      '#PBS -o ./out.$PBS_JOBID \n', ...
      '#PBS -e ./err.$PBS_JOBID \n', ...
      '#PBS -S /bin/bash \n', ...
      '#PBS -V \n', ...
      '#PBS -q shared \n', ...
      '#PBS -m ae \n', ...     
      '\n', ...
      'source /etc/profile.d/modules.sh\n', ...
      '\n', ...
      'module load intel/intel-12\n', ...
      '\n', ...
      'echo "MPI Used:"  `which mpirun`\n', ...
      '\n', ...
      '#change the working directory (default is home directory)\n', ...
      'echo Working directory is $PBS_O_WORKDIR\n', ...
      'cd $PBS_O_WORKDIR\n', ...
      '\n', ...
      '# Write out some information on the job\n', ...
      'echo Running on host `hostname`\n', ...
      'echo Time is `date`\n', ...
      '\n', ...
      '###### Define number of processors\n', ...
      'NPROCS=`wc -l < $PBS_NODEFILE`\n', ...
      'echo This job has allocated $NPROCS cpus\n', ...
      '\n', ...
      '# Tell me which nodes it is run on\n', ...
      'echo " "\n', ...
      'echo This job runs on the following processors:\n', ...
      'echo `cat $PBS_NODEFILE`\n', ...
      'echo " "\n', ...
      '\n', ...
      '#\n', ...
      '# Run the job\n', ...
      '#\n', ...
      '\n', ...
      '# Setup regcache for MX\n', ...
      '\n', ...
      'export MX_RCACHE=0\n', ...
      '\n', ...
      run_str,'\n' );
    
    %%% Run.sh just executes the PBS script    
    fprintf(sfid,['qsub ',pbsfname,' > output.txt']);
    
    %%% Create the PBS run script
    pbsfid = fopen(pbsdirname,'w');
    if (pbsfid == -1)
      error(['Could not open ',pbsdirname]);
    end
    fprintf(pbsfid,pbsstr);
    fclose(pbsfid);
    
    %%% Create a file to upload the run to the cluster    
    upstr = ['scp -r ',fullfile('..',run_name),' astewart@ardbeg.gps.caltech.edu:',cluster_sub_dir];
    upfid = fopen(upfname,'w');
    if (upfid == -1)
      error(['Could not open ',upfname]);
    end
    fprintf(upfid,upstr);
    fclose(upfid);
    
    %%% Create a file to download the run from the cluster
    downstr = ['scp -r astewart@ardbeg.gps.caltech.edu:',cluster_run_dir,' ../'];
    downfid = fopen(downfname,'w');
    if (downfid == -1)
      error(['Could not open ',downfname]);
    end
    fprintf(downfid,downstr);
    fclose(downfid);

  %%% Otherwise just create a script to run locally
  else
             
    fprintf(sfid,run_str);

  end
  
  %%% Create a file to clean the run folder of output files
  cleanstr = ['rm ./*n=*.dat'];
  cleanfid = fopen(cleanfname,'w');
  if (cleanfid == -1)
    error(['Could not open ',cleanfname]);
  end
  fprintf(cleanfid,cleanstr);
  fclose(cleanfid);

  %%% Close run script
  fclose(sfid);  
  
end


